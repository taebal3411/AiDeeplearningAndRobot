import tensorflow as tf
import numpy as np
from numpy import array
from keras.models import Sequential
from keras.layers import Dense, LSTM

X=np.array([[1,2,3],[2,3,4],[3,4,5],[4,5,6]])
YT=np.array([4,5,6,7])
print(X.shape, YT.shape)

X=X.reshape(4,3,1)
print(X.shape)

model = tf.keras.Sequential([
    tf.keras.Input(shape=(3,1)),
    tf.keras.layers.LSTM(10,activation='relu'),
    tf.keras.layers.Dense(5),
    tf.keras.layers.Dense(1)
])
model.compile(optimizer='adam',loss='mse')
model.fit(X,YT,epochs=10000,batch_size=1)

x=np.array([6,7,8])
x=x.reshape(1,3,1)
y=model.predict(x)
print(y)

x=array([[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],
        [6,7,8],[7,8,9],[8,9,10],[9,10,11],[10,11,12],
        [20,30,40],[30,40,50],[40,50,60]])
y=array([4,5,6,7,8,9,10,11,12,13,50,60,70])
print(x.shape, y.shape)
x=x.reshape(13,3,1)
print(x.shape)

>>>
Epoch 10000/10000
4/4 [==============================] - 0s 997us/step - loss: 1.5733e-04
1/1 [==============================] - 0s 93ms/step
[[8.969455]]  # y=model.predict(x)

(13, 3) (13,)  # print(x.shape, y.shape)

(13, 3, 1)  # print(x.shape)

#참고 사이트
RNN+LSTM 설명
https://colah.github.io/posts/2015-08-Understanding-LSTMs/
RNN+LSTM 설명
https://docs.likejazz.com/lstm/
LSTM 구현
https://github.com/likejazz/jupyter-notebooks/blob/master/deep-learn
ing/lstm-keras-inspect.py
